############################################################
##    FILENAME:   preprocess.py    
##    VERSION:    1.0
##    SINCE:      2014-11-14
##    AUTHOR: 
##        Jimmy Lin <jimmylin@cs.utexas.edu>*
##        Hsiang-Fu Yu <rofuyu@cs.utexas.edu>
##        Zhong Kai <zhongkai@ices.utexas.edu>
##        Ian Yen <ianyen@cs.utexas.edu>   
##
############################################################
##    Edited by MacVim
##    Documentation auto-generated by Snippet 
############################################################

import sys
import csv
FEAT_SEP = ","
INS_SEP = "\n"

############################################################
## output file
isContFile = sys.argv[1]
libSVMFile = sys.argv[2]
############################################################


strings = []
numline = 0
headers = []
tables = []
counters = []
dataset = []

f = open ("./datasets/2013dataA.remove2", "r")

row = f.readline()
headers = row.split(FEAT_SEP)
del headers[-1]
print(len(headers))

## construct empty dictionary for each attribute
for attr in headers:
    tables.append({})
    counters.append(0)
    continue

while row:
    row = f.readline()
    if not row: 
        break
    ## for attribute
    ins = row.strip(INS_SEP)
    ins = row.replace('""', '?')
    ins = row.replace('"', '')
    ins = ins.split(FEAT_SEP)
    del ins[-1]
    dataset.append(ins)
    for i in range(len(ins)):
        feat = ins[i]
        if tables[i].has_key(feat):
            pass
        else:
            counters[i] += 1
            tables[i].update({feat:counters[i]})

f.close()
    
############################################################
# output is cont file
print "start print cont file"
CUTOFF = 100
attr_list = []
isContOut = open(isContFile, "wb+")
print (len(headers))

for i in range(len(headers)):
    domainsize = len(tables[i])
    if domainsize > CUTOFF: # continuous
        attr_list.append(1)
    else:
        attr_list.append(0)

for j in range(len(headers)):
    for i in range(len(dataset)):
        try:
            s = float(dataset[i][j])
        except:
            attr_list[j] = 0
            break

# remove some feature of large dimensionality
for j in range(len(headers)):
    if attr_list[j] == 0 and counters[j] > 1000: 
        attr_list[j] = 2

for is_continuous in attr_list:
    # print(str(is_continuous))
    isContOut.write(str(is_continuous)+"\n")
isContOut.close()
print "end print cont file"

############################################################
summations = [0] * len(headers)
counts = [0] * len(headers)
means = [0] * len(headers)
for j in range(len(headers)):
    if attr_list[j] == 1: # continuous
        for i in range(len(dataset)):
            if len(dataset[i][j]) == 0:
                pass
            else:
               summations[j] += float(dataset[i][j])
               counts[j] += 1

for j in range(len(headers)):
    if attr_list[j] == 1: # continuous
        means[j] = 1.0 * summations[j] / counts[j]

############################################################
# output feature file
print "start print libsvm file"
dim = open ('dimensionality', "w")
sumup = 0
for i in range(len(dataset)):
    ins = dataset[i]
    label = ins[0]
    for j in range(1,len(headers)):
        if attr_list[j] == 1: ## continuous variable 
            if len(ins[j]) == 0:
                value = means[j]
            else:
                value = float(ins[j])
            dim.write(str(j) + ":" + str(2)+"\n")
            sumup += 2
        elif attr_list[j] == 0: # nominal (binary coding)
            value = tables[j][ins[j]]
            dim.write(str(j) + ":"+ str(counters[j]) + "\n")
            sumup += counters[j]
        elif attr_list[j] == 2: # nominal (binary coding)
            pass
    break
print("sumup: ", sumup)
dim.close()
print "end print libsvm file"

############################################################
# output libsvmfile
print "start print libsvm file"
libSVMOut = open (libSVMFile, "w")
for i in range(len(dataset)):
    ins = dataset[i]
    label = ins[0]
    libSVMOut.write(label)
    index_acc = 1
    for j in range(1,len(headers)):
        if attr_list[j] == 1: ## continuous variable 
            if len(ins[j]) == 0: ## missing
                value = means[j]
                libSVMOut.write(" "+ str(index_acc) + ":" + str(1))
            else:
                value = float(ins[j])
            libSVMOut.write(" "+ str(index_acc+1) + ":" + str(value))
            index_acc += 2
        elif attr_list[j] == 0: # nominal (binary coding)
            value =  tables[j][ins[j]]
            libSVMOut.write(" "+ str(index_acc + value) + ":1")
            index_acc += counters[j]
        elif attr_list[j] == 2:
            pass
    libSVMOut.write("\n")
libSVMOut.close()
print "end print libsvm file"
